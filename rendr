#!/usr/bin/env python

import sys, re
import json, urllib2, socket
from optparse import OptionParser

from tumblelog import Tumblelog
import templater

def parse_tumblr_json(stream):
    '''
    Load in the contents of a stream and get rid of the bad stuff (i.e. the 
    Javascript variable assignment and end semicolon)
    '''
    contents = load_stream(stream)
    
    # Strip out 'var tumblr_api_read = ' at the start
    # and ';\n' at the end
    return json.loads(contents[22:].strip(';\n'))

def load_stream(stream):
    contents = u''
    
    while True:
        chunk = stream.read()
        contents = contents + chunk.decode('utf8')
        
        if chunk == '':
            break
    
    return contents
  
def load_blog(url):
    '''
    Open the URL, load the JSON and instantiate a Tumbleblog object
    '''
    if re.search(r'^https?://', url):
        if not re.search(r'/api/read/json/?$', url):
            if not re.search(r'/$', url):
                url = url + '/'
            url = url + 'api/read/json'
    
        stream = urllib2.urlopen(url)
    else:
        stream = open(url, 'r')

    tumblr = parse_tumblr_json(stream)
    stream.close()  
    blog = Tumblelog(tumblr)
    return blog

def save_blog(url, theme, output, **optional_args):
    '''
    Load the blog and theme, render it, and save the output.
    '''
    blog = load_blog(url)
    blog.twitterUsername = optional_args.get('twitter', None)

    with open(theme, 'r') as f:
        template = load_stream(f)
    result = templater.render(blog, template)
    html = result.encode('utf8')
    
    with open(output, 'w') as out:
        out.write(html)

def serve_blog(url, theme, port, **optional_args):
    '''
    Load the blog and start a WSGI server. When a request is made, load the
    theme and render it.
    '''
    from wsgiref.simple_server import make_server
    
    blog = load_blog(url)
    blog.twitterUsername = optional_args.get('twitter', None)
    
    def application(environ, start_response):
        from wsgiref.util import setup_testing_defaults
        setup_testing_defaults(environ)

        status = '200 OK'
        headers = [('Content-type', 'text/html')]

        start_response(status, headers)

        path = environ['PATH_INFO']
        
        pathParts = path.split('/')[1:]
        print pathParts
        if len(pathParts) == 0 or (len(pathParts) == 1 and pathParts[0] == ''):
            blog.singlePost = None
        elif len(pathParts) > 2 and pathParts[0] == 'post':
            blog.singlePost = pathParts[1]
            print 'single post:', pathParts[1]
        else:
            blog.has404 = True

        with open(theme) as f:
            template = load_stream(f)
        result = templater.render(blog, template)
        html = result.encode('utf8')
        return html
    
    httpd = make_server('', port, application)
    print "Listening on http://localhost:%d/" % port
    httpd.serve_forever()    

def main(args):
    parser = OptionParser('%prog [options] {blog url} {theme file}')
    parser.add_option('-o','--output-file', dest='output',
        help='instead of starting a webserver, save output to a file')
    parser.add_option('-t','--twitter', dest='twitter',
        help='a twitter username to use when rendering the theme')
    parser.add_option('-p','--port', dest='port', type='int', default=88625,
        help='port on which the server will listen')
    
    options, args = parser.parse_args(args)
    
    try:
        url = args[0]
    except IndexError:
        parser.error('you must specify a valid Tumblr url (or local file of '+
            'JSON data)')
    
    try:
        theme = args[1]
    except IndexError:
        parser.error('you must specify a theme file')
    
    if options.output:
        save_blog(url, theme, options.output)
    else:
        try:
            serve_blog(url, theme, options.port, twitter=options.twitter)
        except urllib2.HTTPError, e:
            return 'Could not connect to %s: %s' % (url, e)
        except socket.error, e:
            return 'Unable to open socket: %s' % e

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))